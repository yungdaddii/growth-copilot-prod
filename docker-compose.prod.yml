version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: keelo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - backend
    networks:
      - keelo-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: keelo-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.keelo.ai
      - NEXT_PUBLIC_WS_URL=wss://api.keelo.ai/ws/chat
      - NEXT_PUBLIC_POSTHOG_KEY=${NEXT_PUBLIC_POSTHOG_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${NEXT_PUBLIC_POSTHOG_HOST}
    networks:
      - keelo-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: keelo-backend
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://postgres:${DB_PASSWORD}@postgres:5432/keelo
      - REDIS_URL=redis://redis:6379/0
      - CORS_ORIGINS=["https://keelo.ai", "https://www.keelo.ai"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - keelo-network
    restart: unless-stopped

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: keelo-celery
    command: celery -A app.utils.celery_app worker --loglevel=info
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://postgres:${DB_PASSWORD}@postgres:5432/keelo
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - keelo-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: keelo-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=keelo
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - keelo-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: keelo-cache
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - keelo-network
    restart: unless-stopped

networks:
  keelo-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: